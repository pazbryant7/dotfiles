#!/bin/sh

set -e

BLOCK_DEVICE="/dev/sdb1"
MEDIA_DESTINATION="/run/media/bryant/tiagovault"

# Paths separated by newlines for safe iteration.
MEDIA_SOURCES="$HOME/Documents/books
$HOME/Music
$HOME/.config/BraveSoftware
$HOME/Documents/github/ansible-dots/.secrets"

RSYNC_EXCLUDE_OPTS="
# Sockets and Lockfiles
*.sock
SingletonLock
SingletonSocket
SingletonCookie

# General Cache and Temporary Files
Crashpad/
Local Cache/
Cache/
Code Cache/
GrShaderCache/
ShaderCache/
Service Worker/CacheStorage/
Service Worker/ScriptCache/
GPUCache/
DawnCache/
DawnGraphiteCache/
Media Cache/
VideoDecodeStats/
optimization_guide_prediction_model_downloads/
optimization_guide_model_cache/
tmp/
shared_proto_db/
Safe Browse/
user_data/
webrtc_event_logs/
segment_data/
system_certs/
.tmp
.log

# Common OS/Desktop meta-files
.DS_Store
Thumbs.db
ehthumbs.db
desktop.ini
.fuse_hidden*
.swp
"

mount_disk() {
	if mountpoint -q "$MEDIA_DESTINATION"; then
		printf '%s\n' "Info: Destination '$MEDIA_DESTINATION' is already a mount point."
		return 0
	fi

	printf '%s\n' "Info: Attempting to mount '$BLOCK_DEVICE'..."
	if ! udisksctl mount -b "$BLOCK_DEVICE"; then
		printf '%s\n' "Error: Failed to mount '$BLOCK_DEVICE'." >&2
		return 1
	fi
	printf '%s\n' "Success: Mounted '$BLOCK_DEVICE' at '$MEDIA_DESTINATION'."
	return 0
}

unmount_disk() {
	printf '%s\n' "Info: Attempting to unmount '$BLOCK_DEVICE'..."
	_unmount_output="$(udisksctl unmount -b "$BLOCK_DEVICE" 2>&1)"
	_unmount_status="$?"

	if [ ! "$_unmount_status" -eq 0 ]; then
		printf '%s\n' "Error: Failed to unmount '$BLOCK_DEVICE'." >&2
		printf '%s\n' "udisksctl output: $_unmount_output" >&2
		return 1
	fi

	if mountpoint -q "$MEDIA_DESTINATION"; then
		printf '%s\n' "Warning: '$MEDIA_DESTINATION' still appears as a mount point. Please check manually." >&2
	fi

	printf '%s\n' "Success: '$BLOCK_DEVICE' has been unmounted."
	return 0
}

run_backup() {
	_source_path="$1"
	_exclude_file="$2"
	_source_basename="$(basename "$_source_path")"
	_target_leaf_name=$(printf '%s\n' "$_source_basename" | tr '[:upper:]' '[:lower:]')

	_error_log_file="/tmp/rsync_errors_$_target_leaf_name.log"

	_backup_destination_base="$MEDIA_DESTINATION/backups"
	_final_destination_path="$_backup_destination_base/$_target_leaf_name"

	if ! mkdir -p "$_final_destination_path"; then
		printf '%s\n' "Error: Failed to create destination directory '$_final_destination_path'." >&2
		return 1
	fi

	printf '%s\n' "Backing up '$_source_path' to '$_final_destination_path'..."

	if ! rsync -avL --delete --exclude-from="$_exclude_file" "$_source_path/" "$_final_destination_path/" 2>"$_error_log_file"; then
		printf "Error: rsync failed for source '%s'. See log for details:\n" "$_source_path" >&2
		printf "  %s\n" "$_error_log_file" >&2
		return 1
	else
		rm -f "$_error_log_file"
	fi

	return 0
}

flush_disk_cache() {
	sync
	_sync_status="$?"

	if [ ! "$_sync_status" -eq 0 ]; then
		printf '%s\n' "Error: 'sync' command failed. Data may not be fully written to disk." >&2
		return 1
	fi
	return 0
}

main() {
	printf '%s\n' "=== Starting Backup Process ==="

	if ! mount_disk; then
		printf '%s\n' "Critical Error: Disk mount failed. Aborting backup process." >&2
		exit 1
	fi

	_exclude_file=$(mktemp) || exit 1
	trap 'rm -f "$_exclude_file"' EXIT INT TERM HUP
	printf '%s\n' "$RSYNC_EXCLUDE_OPTS" >"$_exclude_file"

	if ! printf '%s\n' "$MEDIA_SOURCES" | {
		_subshell_failed=0
		while read -r source; do
			if [ "$source" = "" ]; then
				continue
			fi

			if [ ! -d "$source" ]; then
				printf "Warning: Source path '%s' does not exist or is not a directory. Skipping.\n" "$source" >&2
				continue
			fi

			if ! run_backup "$source" "$_exclude_file"; then
				_subshell_failed=1
			fi
		done
		exit "$_subshell_failed"
	}; then
		printf '%s\n' "Warning: One or more backup tasks failed." >&2
	fi

	if flush_disk_cache; then
		printf '%s' "Would you like to unmount the disk $BLOCK_DEVICE (y/n)? "
		read -r response

		if [ "$response" = "y" ] || [ "$response" = "Y" ]; then
			if unmount_disk; then
				printf '%s\n' "=== Disk $BLOCK_DEVICE unmounted successfully. ==="
				printf '%s\n' "=== General backup has finished. ==="
				exit 0
			else
				printf '%s\n' "ERROR: Failed to unmount disk $BLOCK_DEVICE." >&2
				exit 1
			fi
		elif [ "$response" = "n" ] || [ "$response" = "N" ]; then
			printf '%s\n' "=== General backup has finished. ==="
			exit 0
		else
			printf '%s\n' "WARNING: Invalid response. Assuming 'n' (no unmount)." >&2
			printf '%s\n' "=== General backup has finished. ==="
			exit 0
		fi
	else
		printf '%s\n' "ERROR: Disk cache flush failed. Aborting backup." >&2
		exit 1
	fi

}

main "$@"
